@rendermode InteractiveServer
@using Arboles_Binarios.models
@using Arboles_Binarios.services

<style> 
    button {
        margin: 5px
    }

    .treeMetods{
        width: 100%;
        display: flex;
        align-items: center;
        margin-top: 5px;
        flex-wrap: wrap;
    }
</style>

<div class="container mt-5">
    @if (Arbol.Raiz != null)
    {
        <TreeNode Nodo="Arbol.Raiz" />
    }
    else
    {
        <p class="text-muted text-center">El árbol está vacío</p>
    }

    <div class="mt-4 text-center">
        <input class="form-control mb-2" type="text" @bind="Informacion.Nombre" placeholder="Nombre" />
        <input class="form-control mb-2" type="text" @bind="Informacion.Apellido" placeholder="Apellido" />
        <input class="form-control mb-2" type="text" @bind="Informacion.Telefono" placeholder="Teléfono" />
        <input class="form-control mb-2" type="number" @bind="Informacion.Edad" placeholder="Edad" />
        <button class="btn btn-success me-2" @onclick="Agregar">Agregar</button>
        <button class="btn btn-danger me-3" @onclick="Eliminar">Eliminar Por Edad</button>
        <button class="btn btn-primary me-3" @onclick="Buscar">Buscar Por Edad</button>
        <button class="btn btn-secondary me-3" @onclick="VerHijos">Mostrar descendientes de nodo</button>
        <button class="btn btn-secondary me-3" @onclick="VerPadre">Mostrar antecesor de nodo</button>
        <button class="btn btn-secondary me-3" @onclick="VerGrado">Mostrar grado de nodo</button>
        <button class="btn btn-secondary me-3" @onclick="VerNivel">Mostrar nivel de nodo</button>
      

        <h5 class="mt-3">Metodos de arbol</h5>
        <div class="treeMetods" >
            <button class="btn btn-primary me-3" @onclick="VerInteriores">Mostrar nodos interiores del arbol</button>
            <button class="btn btn-primary me-3" @onclick="VerHojas">Mostrar nodos hojas del arbol</button>
            <button class="btn btn-danger me-3" @onclick="EliminarHojas">Eliminar todas las hojas del arbol</button>
            <button class="btn btn-primary me-3" @onclick="VerLongitudCaminoInterno">Mostrar longitud de camino interno</button>
            <button class="btn btn-primary me-3" @onclick="VerLongitudCaminoExterno">Mostrar longitud de camino externo</button>
            <button class="btn btn-dark me-3" @onclick="Intercambiar">Intercambiar subárboles</button>
        </div>

        @if (nodoEncontrado != null)
        {
            <div class="alert alert-info mt-3">
                <strong>Resultado de búsqueda:</strong> @nodoEncontrado.Informacion.Nombre @nodoEncontrado.Informacion.Apellido, edad: @nodoEncontrado.Informacion.Edad, tel: @nodoEncontrado.Informacion.Telefono  
            </div>
        }



        @if (!string.IsNullOrEmpty(resultadoDescripcion))
        {
            <div class="alert alert-secondary mt-3">
                <strong>@resultadoDescripcion</strong>
            </div>
        }

        @if (listaNodos?.Any() == true)
        {
            <ul class="list-group mt-2">
                @foreach (var nodo in listaNodos)
                {
                    <li class="list-group-item">
                        @nodo.Informacion.Nombre @nodo.Informacion.Apellido - Edad: @nodo.Informacion.Edad
                    </li>
                }
            </ul>
        }

        @if (padreNodo != null)
        {
            <div class="alert alert-info mt-2">
                Padre: @padreNodo.Informacion.Nombre @padreNodo.Informacion.Apellido (Edad: @padreNodo.Informacion.Edad)
            </div>
        }


    </div>
</div>

@code {

    [Parameter]
    public ArbolBinario Arbol { get; set; }

    private InformacionNodo Informacion = new();
    private NodoArbol nodoEncontrado = null;

    //Busqueda de nodos
    private List<NodoArbol> listaNodos = new();
    private NodoArbol padreNodo = null;
    private int resultadoEntero = -1;
    private string resultadoDescripcion = "";


    private void Agregar()
    {
        Arbol?.Insertar(Informacion);
        Informacion = new(); // Limpia formulario
    }

    private void Eliminar()
    {
        Arbol?.Eliminar(Informacion.Edad);
    }

    private void Buscar()
    {
        nodoEncontrado = Arbol.Buscar(Informacion.Edad);
    }


    //Metodos de busqueda
    private void VerHijos()
    {
        listaNodos = Arbol.ObtenerHijos(Informacion.Edad);
        resultadoDescripcion = $"Descendientes de {Informacion.Edad}";
    }

    private void VerPadre()
    {
        padreNodo = Arbol.ObtenerPadre(Informacion.Edad);
        resultadoDescripcion = padreNodo != null
            ? $"Antecesor de {Informacion.Edad}: {padreNodo.Informacion.Nombre} {padreNodo.Informacion.Apellido}"
            : "Nodo no tiene padre o no existe.";
    }

    private void VerGrado()
    {
        resultadoEntero = Arbol.GradoNodo(Informacion.Edad);
        resultadoDescripcion = resultadoEntero >= 0
            ? $"Grado del nodo con edad {Informacion.Edad}: {resultadoEntero}"
            : "Nodo no encontrado.";
    }

    private void VerNivel()
    {
        resultadoEntero = Arbol.NivelNodo(Informacion.Edad);
        resultadoDescripcion = resultadoEntero >= 0
            ? $"Nivel del nodo con edad {Informacion.Edad}: {resultadoEntero}"
            : "Nodo no encontrado.";
    }
    private void VerLongitudCaminoInterno()
    {
        resultadoEntero = Arbol.LongitudCaminoInterno();
        resultadoDescripcion = $"Longitud del camino interno: {resultadoEntero}";
    }

    private void VerLongitudCaminoExterno()
    {
        resultadoEntero = Arbol.LongitudCaminoExterno();
        resultadoDescripcion = $"Longitud del camino externo: {resultadoEntero}";
    }



    //Metodos del Arbol
    private void VerInteriores()
    {
        listaNodos = Arbol.ObtenerNodosInteriores();
        resultadoDescripcion = "Nodos interiores";
    }
    private void VerHojas()
    {
        listaNodos = Arbol.ObtenerNodosHoja();
        resultadoDescripcion = "Nodos hoja";
    }
    private void EliminarHojas()
    {
        Arbol.EliminarHojas();
    }
    private void Intercambiar()
    {
        Arbol.IntercambiarSubarboles();
        resultadoDescripcion = "Se han intercambiado los subárboles izquierdo y derecho en todos los nodos.";
    }

}
